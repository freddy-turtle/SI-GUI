import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { AudioData } from './audioHandler';

export interface AudioState {
  status: 'idle' | 'loading' | 'failed';
  audioData?: AudioData;
}

const initialState: AudioState = {
  status: 'idle'
};

export const getAudioData = createAsyncThunk('audio/getAudioData', async () => {
  return await window.electron.audio();
});

export const graphicsSlice = createSlice({
  name: 'audio',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAudioData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getAudioData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.audioData = action.payload;
      })
      .addCase(getAudioData.rejected, (state) => {
        state.status = 'failed';
      });
  }
});

export default graphicsSlice.reducer;
