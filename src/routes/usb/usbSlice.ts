import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { UsbData } from './usbHandler';

export interface UsbState {
  status: 'idle' | 'loading' | 'failed';
  usbData?: UsbData;
}

const initialState: UsbState = {
  status: 'idle'
};

export const getUsbData = createAsyncThunk(
  'usb/getUsbData',
  async () => {
    return await window.electron.usb();
  }
);

export const graphicsSlice = createSlice({
  name: 'usb',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getUsbData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getUsbData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.usbData = action.payload;
      })
      .addCase(getUsbData.rejected, (state) => {
        state.status = 'failed';
      });
  }
});

export default graphicsSlice.reducer;
