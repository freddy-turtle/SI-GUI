import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { PrinterData } from './printerHandler';

export interface PrinterState {
  status: 'idle' | 'loading' | 'failed';
  printerData?: PrinterData;
}

const initialState: PrinterState = {
  status: 'idle'
};

export const getPrinterData = createAsyncThunk(
  'usb/getPrinterData',
  async () => {
    return await window.electron.printer();
  }
);

export const printerSlice = createSlice({
  name: 'printer',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getPrinterData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getPrinterData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.printerData = action.payload;
      })
      .addCase(getPrinterData.rejected, (state) => {
        state.status = 'failed';
      });
  }
});

export default printerSlice.reducer;
