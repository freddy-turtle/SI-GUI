import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { MemoryData, MemoryLayoutData } from './memoryHandler';

export interface MemoryState {
  status: 'idle' | 'loading' | 'failed';
  memoryData?: MemoryData;
  memoryLayoutData?: MemoryLayoutData;
}

const initialState: MemoryState = {
  status: 'idle'
};

export const getMemoryData = createAsyncThunk(
  'memory/getMemoryData',
  async () => {
    return await window.invoke.memory();
  }
);

export const getMemoryLayoutData = createAsyncThunk(
  'memory/getMemoryLayoutData',
  async () => {
    return await window.invoke.memory_layout();
  }
);

export const memorySlice = createSlice({
  name: 'memory',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getMemoryData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getMemoryData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.memoryData = action.payload;
      })
      .addCase(getMemoryData.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getMemoryLayoutData.fulfilled, (state, action) => {
        state.memoryLayoutData = action.payload;
      });
  }
});

export default memorySlice.reducer;
