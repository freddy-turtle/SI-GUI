import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';
import { NetworkConnectionsData, NetworkInterfacesData, NetworkStatsData } from './networkHandler';

export interface NetworkState {
  status: 'idle' | 'loading' | 'failed';
  networkInterfacesData?: NetworkInterfacesData;
  networkStatsData?: NetworkStatsData;
  networkConnectionsData?: NetworkConnectionsData;
}

const initialState: NetworkState = {
  status: 'idle'
};

export const getNetworkInterfacesData = createAsyncThunk(
  'network/getNetworkInterfacesData',
  async () => {
    return await window.electron.network_interfaces();
  }
);

export const getNetworkStatsData = createAsyncThunk(
  'network/getNetworkStatsData',
  async () => {
    return await window.electron.network_stats();
  }
);

export const getNetworkConnectionsData = createAsyncThunk(
  'network/getNetworkConnectionsData',
  async () => {
    return await window.electron.network_connections();
  }
);

export const networkSlice = createSlice({
  name: 'network',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {},
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getNetworkInterfacesData.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(getNetworkInterfacesData.fulfilled, (state, action) => {
        state.status = 'idle';
        state.networkInterfacesData = action.payload;
      })
      .addCase(getNetworkInterfacesData.rejected, (state) => {
        state.status = 'failed';
      })
      .addCase(getNetworkStatsData.fulfilled, (state, action) => {
        state.networkStatsData = action.payload
      })
      .addCase(getNetworkConnectionsData.fulfilled, (state, action) => {
        state.networkConnectionsData = action.payload
      });
  }
});

export default networkSlice.reducer;
